import express from '@feathersjs/express';
import feathers from '@feathersjs/feathers';
import socketio from '@feathersjs/socketio';
import { initDummyData } from 'backend/initDummyData';
import { generateSdk } from 'client/sdkGeneration';
import { config } from 'config';
import cors from 'cors';
import memory from 'feathers-memory';
import swagger from 'feathers-swagger';
import { BuildStatus } from 'model/Plan';
import * as fs from 'fs';

import 'source-map-support/register';
import {downloadSdk} from "client/sdkDownload";

const TEMP_DIR: string = '../swagger-platform-tmp/';

async function run(port: number) {

  fs.mkdir(TEMP_DIR);

  const specs = memory();
  specs.docs = {
    description: 'Swagger/OpenAPI specs',
    definitions: {
      specs: {
        type: 'object',
        additionalProperties: true,
      },
      'specs list': {
        type: 'array',
      },
    },
  };
  const plans = memory();
  plans.docs = {
    description: 'The plans used for generating SDKs according to a given specification',
    definitions: {
      plans: {
        type: 'object',
        properties: {
          specId: {
            type: 'integer',
            format: 'int64',
            description: 'ID of the specification associated with the plan',
          },
        },
        additionalProperties: true,
      },
      'plans list': {
        type: 'array',
      },
    },
  };
  const downloads = memory();
  const sdks = memory();
  sdks.docs = {
    description: 'The SDKs generated by Swagger/OpenAPI specs',
    definitions: {
      sdks: {
        type: 'object',
        properties: {
          planId: {
            type: 'integer',
            format: 'int64',
            description: 'ID of the plan to generate the SDK for',
          },
        },
        additionalProperties: true,
      },
      'sdks list': {
        type: 'array',
      },
    },
  };
  const app: express.Express = express(feathers());

  app
    .use(express.json())
    .use(express.urlencoded({ extended: true }))
    .configure(express.rest())
    .configure(socketio())
    .configure(
      swagger({
        docsPath: '/docs',
        uiIndex: true,
        info: {
          title: 'Swagger Platform',
          description: 'TODO: Someone describe swagger-platform :)',
        },
      }),
    )
    .get('/', (req, res) => res.redirect('/docs'))
    .use('/specifications', specs)
    .use('/plans', plans)
    .use('/sdks', sdks)
    .use('/downloads', downloads)
    .use(express.errorHandler());

  await initDummyData(app.service('specifications'), app.service('plans'));
  app.service('plans').hooks({
    before: {
      async create(context) {
        await specs.get(context.data.specId);
        context.data.buildStatus = BuildStatus.NOTRUN;
        // TODO: Will need to change this at some point
        context.data.latestVersion = 'TODO';
        return context;
      },
    },
  });
  app.service('downloads').hooks({
    before: {
      async create(context) {
        const url = context.data.downloadUrl;
        const result = await downloadSdk(url);
        console.log('result');
        console.log(result);
        context.data.info = result;
        return context;
      }
    }
  });
  // TODO: Docs say this works but i'm not convinced
  // https://docs.feathersjs.com/api/client/socketio.html#direct-connection
  // https://github.com/feathersjs/socketio/issues/107
  app.service('downloads').timeout = 10000;
  app.service('sdks').hooks({
    before: {
      async create(context) {
        const plan = await plans.get(context.data.planId);
        const spec = await specs.get(plan.specId);
        const generationResponse = await generateSdk(spec);
        /*
        TODO: The linkside of the info object is probably temporary.
        Might need to consider downloading the object from 
        wherever the Swagger gen API stores it.
        */
        context.data.info = generationResponse;
        // console.log('return from hook: ' + JSON.stringify(context));
        return context;
      },
    },
  });
  // Enables CORS requests if configured to do so
  if (config.backend.useCors) {
    app.use(cors());
  }
  app.listen(port);
}

const envPort: string | undefined = process.env.PORT;
const appPort: number = envPort ? Number.parseInt(envPort) : config.backend.port;
run(appPort);